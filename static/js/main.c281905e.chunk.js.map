{"version":3,"sources":["logo.svg","components/Card/index.js","containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","onClick","className","src","image","Game","cards","id","cardClicked","card","state","clickedCards","includes","alert","setState","console","log","this","map","index","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,0KCW5BC,G,MARF,SAACC,GACZ,OACE,yBAAKC,QAASD,EAAMC,QAASC,UAAU,wBACrC,yBAAKC,IAAKH,EAAMI,WCiGPC,E,YAtCb,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KA9DRM,MAAQ,CACN,CACEC,GAAI,QACJH,MAAO,wDAET,CACEG,GAAI,OACJH,MACE,oGAEJ,CACEG,GAAI,QACJH,MACE,qLAEJ,CACEG,GAAI,UACJH,MACE,kFAEJ,CACEG,GAAI,SACJH,MACE,oFAEJ,CACEG,GAAI,OACJH,MACE,8hBAEJ,CACEG,GAAI,UACJH,MACE,kIAEJ,CACEG,GAAI,OACJH,MAAO,wDAET,CACEG,GAAI,SACJH,MACE,+JAEJ,CACEG,GAAI,OACJH,MACE,uEAEJ,CACEG,GAAI,WACJH,MACE,iHAEJ,CACEG,GAAI,QACJH,MACE,wEAIa,EAQnBI,YAAc,SAAAC,GACR,EAAKC,MAAMC,aAAaC,SAASH,EAAKF,KACxCM,MAAM,kBACN,EAAKC,SAAS,CACZH,aAAc,MAGhB,EAAKG,SAAS,CAAEH,aAAa,GAAD,mBAAK,EAAKD,MAAMC,cAAhB,CAA8BF,EAAKF,QAbjE,EAAKG,MAAQ,CACXJ,MAAO,EAAKA,MACZK,aAAc,IAJC,E,sEAmBT,IAAD,OAEP,OADAI,QAAQC,IAAIC,KAAKP,MAAMC,cAErB,6BACE,2CACA,yBAAKT,UAAU,OACZe,KAAKP,MAAMJ,MAAMY,KAAI,SAACT,EAAMU,GAAP,OACpB,kBAAC,EAAD,CACEC,IAAKD,EACLlB,QAAS,kBAAM,EAAKO,YAAYC,IAChCL,MAAOK,EAAKL,iB,GA3FPiB,aCOJC,MAJf,WACE,OAAO,kBAAC,EAAD,OCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c281905e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport './style.css';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div onClick={props.onClick} className=\"col-3 card-component\">\r\n      <img src={props.image} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"../../components/Card\";\r\n\r\nclass Game extends Component {\r\n  cards = [\r\n    {\r\n      id: \"knife\",\r\n      image: \"https://i.ytimg.com/vi/nUj4ObkwrkY/maxresdefault.jpg\"\r\n    },\r\n    {\r\n      id: \"pipe\",\r\n      image:\r\n        \"https://snworksceo.imgix.net/dtc/3fb856c1-1399-4e9b-a2b3-74b8b094c618.sized-1000x1000.jpg?w=1000\"\r\n    },\r\n    {\r\n      id: \"radio\",\r\n      image:\r\n        \"https://cdn.gamer-network.net/2019/articles/2019-10-03-11-23/untitled-goose-game-heading-to-playstation-and-xbox-1570098189092.jpg/EG11/thumbnail/1920x1072/format/jpg/quality/80\"\r\n    },\r\n    {\r\n      id: \"glasses\",\r\n      image:\r\n        \"http://www.thedopeuniversity.com/wp-content/uploads/2019/06/-1560194750067.jpg\"\r\n    },\r\n    {\r\n      id: \"bottle\",\r\n      image:\r\n        \"http://yoyosplayland.com.au/wp-content/uploads/2019/09/goose-bottle-1024x577.gif\"\r\n    },\r\n    {\r\n      id: \"boot\",\r\n      image:\r\n        \"https://img.resized.co/entertainment/eyJkYXRhIjoie1widXJsXCI6XCJodHRwOlxcXC9cXFwvczMtZXUtd2VzdC0xLmFtYXpvbmF3cy5jb21cXFwvZW50ZXJ0YWlubWVudGllXFxcL3VwbG9hZHNcXFwvMjAxOVxcXC8wOVxcXC8yOTEzMTMyOVxcXC91bnRpdGxlZC1nb29zZS1nYW1lLXNwZWVkcnVuLnBuZ1wiLFwid2lkdGhcIjoxMjAwLFwiaGVpZ2h0XCI6NjMwLFwiZGVmYXVsdFwiOlwiaHR0cDpcXFwvXFxcL3d3dy5zdGFnaW5nLmVudGVydGFpbm1lbnQuaWVcXFwvaW1hZ2VzXFxcL25vLWltYWdlLnBuZ1wifSIsImhhc2giOiI1N2JiNmUzMjZjYWI3ODY3YjA3MjU5ZDU2YWQzMThmODRhMDMyYTAzIn0=/it-s-possible-to-beat-untitled-goose-game-in-just-over-three-minutes.png\"\r\n    },\r\n    {\r\n      id: \"laundry\",\r\n      image:\r\n        \"https://gamespot1.cbsistatic.com/uploads/screen_kubrick/1574/15746725/3512292-gdc_breakout_untitledgoosegame_indiemix_site.jpg\"\r\n    },\r\n    {\r\n      id: \"honk\",\r\n      image: \"https://i.ytimg.com/vi/_1GLCEPezxk/maxresdefault.jpg\"\r\n    },\r\n    {\r\n      id: \"picnic\",\r\n      image:\r\n        \"https://cdn-static.denofgeek.com/sites/denofgeek/files/styles/main_wide/public/2019/09/untitled-goose-game-house-house-feature-interview.jpeg?itok=-9Ey-lzM\"\r\n    },\r\n    {\r\n      id: \"coat\",\r\n      image:\r\n        \"https://cdn.mos.cms.futurecdn.net/JycrJzD5tvbGHWgjtPrRZY-320-80.jpg\"\r\n    },\r\n    {\r\n      id: \"sandwich\",\r\n      image:\r\n        \"https://i2.wp.com/culturedvultures.com/wp-content/uploads/2019/04/Untitled-Goose-Game.jpg?fit=770%2C513&ssl=1\"\r\n    },\r\n    {\r\n      id: \"peace\",\r\n      image:\r\n        \"https://i.kym-cdn.com/entries/icons/facebook/000/018/215/cover8.jpg\"\r\n    }\r\n  ];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: this.cards,\r\n      clickedCards: []\r\n    };\r\n  }\r\n\r\n  cardClicked = card => {\r\n    if (this.state.clickedCards.includes(card.id)) {\r\n      alert(\"You got Goosed\");\r\n      this.setState({\r\n        clickedCards: []\r\n      });\r\n    } else {\r\n      this.setState({ clickedCards:[...this.state.clickedCards, card.id]});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.clickedCards);\r\n    return (\r\n      <div>\r\n        <h1>Clicky Game</h1>\r\n        <div className=\"row\">\r\n          {this.state.cards.map((card, index) => (\r\n            <Card\r\n              key={index}\r\n              onClick={() => this.cardClicked(card)}\r\n              image={card.image}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './containers/Game';\n\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}